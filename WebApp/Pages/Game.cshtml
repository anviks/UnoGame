@page
@using System.Text.Json
@using Domain
@using Domain.Cards
@using Helpers
@model WebApp.Pages.Game

@{
    ViewData["Title"] = "Game";
}

@if (TempData.TryGetValue("GameOver", out var winner))
{
    Model.BroadCast(new { type = "GameOver", winner });

    <div class="alert alert-success">
        Game over, @((string)winner! == Model.Player ? "you" : winner) won!
    </div>
}
else if (Model.Error != "")
{
    <div class="alert error">
        @Model.Error
    </div>
}
else
{
    var missingPlayers = Model.GetHumanPlayerNames()
        .Except(Game.ConnectedUsers[Model.Id].Keys)
        .ToHashSet();
    missingPlayers.Remove(Model.Player);

    if (missingPlayers.Any())
    {
        <div class="alert error">
            <span class="alertText">
                Waiting for players to join: @string.Join(", ", missingPlayers)
                <br class="clear"/>
            </span>
        </div>
    }
    else
    {
        <div class="game-container">

            @{
                var isCurrentPlayer = Model.Engine.GetCurrentPlayer().Name == Model.Player;
            }

            @if (isCurrentPlayer)
            {
                <div class="alert alert-success">
                    It's your turn
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    It's @Model.Engine.GetCurrentPlayer().Name's turn
                </div>
            }

            @if (TempData["Warning"] != null)
            {
                <div class="alert alert-warning">
                    @TempData["Warning"]
                </div>
            }

            @{
                var currentCard = Model.GameState!.DiscardPile[^1];
            }

            <div class="game-info-container">
                <div>
                    Game name: @Model.GameState.GameName
                    @if (Model.GameState.Players.Count > 2)
                    {
                        <br/>
                        @if (Model.GameState.IsReversed)
                        {
                            <span>Game is reversed</span>
                        }
                        else
                        {
                            <span>Game is not reversed</span>
                        }
                    }
                    <br/>
                    Cards left in deck: @Model.GameState.Deck.Cards.Count
                    <br/>
                    Cards in discard pile: @Model.GameState.DiscardPile.Count
                    <br/>
                    Current card: <img src="@Game.CardToFilePath(currentCard)" alt="Current card" width="33" height="50"/>

                    @if (currentCard.Color == ECardColor.Wild)
                    {
                        <p>Current color: <span class="s-square uno-@Model.GameState.CurrentColor.ToString().ToLower()"></span></p>
                    }
                </div>
                <div class="game-info-card-counts">
                    @foreach (var player in Model.GameState.Players)
                    {
                        if (player.Name == Model.Player) continue;
                        var cardsCount = player.Hand.Cards.Count;
                        @(player + " has " + cardsCount + (cardsCount == 1 ? " card" : " cards"))
                        <br/>
                    }
                </div>
            </div>

            @if (isCurrentPlayer)
            {
                var drawnCardJson = HttpContext.Session.GetString("DrawnCard");
                if (drawnCardJson != null)
                {
                    var drawnCard = JsonSerializer.Deserialize<Card>(drawnCardJson, JsonHelper.Options)!;

                    var needsToChooseColor = HttpContext.Session.GetInt32("ChooseColor") == 1;
                    var title = needsToChooseColor
                        ? "Choose a color"
                        : "Would you like to play drawn card?";

                    <div class="modal fade show" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header modal-header-justify-content">
                                    <h5 class="modal-title" id="staticBackdropLabel">@title</h5>
                                </div>

                                @if (needsToChooseColor)
                                {
                                    <div class="modal-body modal-body-align-self">
                                        <form method="post" asp-page-handler="Card" asp-route-Id="@Model.Id" asp-route-Player="@Model.Player" asp-route-SaidUno="@Model.SaidUno">
                                            <input type="submit" asp-for="ChosenColor" value="@ECardColor.Red" class="l-square uno-red"/>
                                            <input type="submit" asp-for="ChosenColor" value="@ECardColor.Yellow" class="l-square uno-yellow"/>
                                            <input type="submit" asp-for="ChosenColor" value="@ECardColor.Green" class="l-square uno-green"/>
                                            <input type="submit" asp-for="ChosenColor" value="@ECardColor.Blue" class="l-square uno-blue"/>
                                            <input type="hidden" asp-for="ChosenCard.Color" value="@drawnCard.Color"/>
                                            <input type="hidden" asp-for="ChosenCard.Value" value="@drawnCard.Value"/>
                                            <input type="hidden" name="PlayDrawnCard" value="true"/>
                                        </form>
                                    </div>
                                }
                                else
                                {
                                    <div class="modal-body modal-body-align-self">
                                        <img src="@Game.CardToFilePath(drawnCard)" alt="drawn card" width="100" height="150"/>
                                    </div>
                                    <div class="modal-footer modal-footer-justify-content">
                                        <form method="post" asp-page-handler="Card" asp-route-Id="@Model.Id" asp-route-Player="@Model.Player" asp-route-SaidUno="@Model.SaidUno">
                                            <button type="submit" class="btn btn-primary" name="PlayDrawnCard" value="true">Yes</button>
                                            <button type="submit" class="btn btn-primary" name="PlayDrawnCard" value="false">No</button>
                                            @if (!Model.SaidUno)
                                            {
                                                <a asp-route-Id="@Model.Id" asp-route-Player="@Model.Player" asp-route-SaidUno="true" class="btn btn-primary">Say "UNO"!</a>
                                            }
                                            <input type="hidden" asp-for="ChosenCard.Color" value="@drawnCard.Color"/>
                                            <input type="hidden" asp-for="ChosenCard.Value" value="@drawnCard.Value"/>
                                        </form>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <p>Choose a card to play:</p>
                <div class="uno-card-hand">
                    @foreach (var card in Model.Engine.GetCurrentPlayer().Hand.Cards)
                    {
                        <form class="card-form" method="post" asp-page-handler="Card" asp-route-Id="@Model.Id" asp-route-Player="@Model.Player">
                            <input type="hidden" asp-for="ChosenCard!.Color" value="@card.Color"/>
                            <input type="hidden" asp-for="ChosenCard!.Value" value="@card.Value"/>
                            <input type="hidden" asp-for="SaidUno" value="@Model.SaidUno"/>

                            @if (card.Color != ECardColor.Wild)
                            {
                                <input type="image" src="@Game.CardToFilePath(card)" alt="image button" class="card-choice"/>
                            }
                            else
                            {
                                <div class="wild-card-div">
                                    <img src="@Game.CardToFilePath(card)" alt="image button" class="card-choice wild-image"/>
                                    <div class="uno-color-choice card-choice">
                                        <input type="submit" asp-for="@Model.ChosenColor" value="@ECardColor.Red" class="quarter top-left uno-red"/>
                                        <input type="submit" asp-for="@Model.ChosenColor" value="@ECardColor.Blue" class="quarter top-right uno-blue"/>
                                        <input type="submit" asp-for="@Model.ChosenColor" value="@ECardColor.Yellow" class="quarter bottom-left uno-yellow"/>
                                        <input type="submit" asp-for="@Model.ChosenColor" value="@ECardColor.Green" class="quarter bottom-right uno-green"/>
                                    </div>
                                </div>
                            }
                        </form>
                    }
                </div>

                <br/>
                <form method="post" asp-page-handler="Draw" class="draw-form" asp-route-Id="@Model.Id" asp-route-Player="@Model.Player">
                    <input type="submit" value="Draw a card" class="btn btn-primary btn"/>
                </form>
                if (!Model.SaidUno)
                {
                    <a asp-route-Id="@Model.Id" asp-route-Player="@Model.Player" asp-route-SaidUno="true" class="btn btn-primary">Say "UNO"!</a>
                }
            }
            else
            {
                <div class="uno-card-hand">
                    @foreach (var card in Model.Engine.State.Players.Find(p => p.Name == Model.Player)!.Hand.Cards)
                    {
                        <img src="@Game.CardToFilePath(card)" alt="image button" class="uno-card"/>
                    }
                </div>
            }
        </div>
        <div class="game-log-container">
            <h5>Game log</h5>
            <div class="game-log overflow-auto">
                @foreach (var move in Model.GameState.History)
                {
                    <div class="game-log-entry">
                        <span class="uno-move">
                            @{
                                var moveWords = move.Split(" ");
                            }

                            @if (CardDeck.StringToCard.TryGetValue(moveWords[^1], out var card))
                            {
                                @(string.Join(" ", moveWords[..^1]) + " ")
                                <img src=@($"{Game.CardToFilePath(card)}") alt=@card class="uno-card-small"/>
                            }
                            else if (moveWords.Length > 1 && CardDeck.StringToCard.TryGetValue(string.Join(" ", moveWords[^2..]), out card))
                            {
                                @(string.Join(" ", moveWords[..^2]) + " ")
                                <img src=@($"{Game.CardToFilePath(card)}") alt=@card class="uno-card-small"/>
                            }
                            else
                            {
                                @move
                            }
                        </span>
                    </div>
                }
            </div>
        </div>
    }

@section Scripts
{
    <script>
        const currentURL = location.href;
        const webSocketURL = currentURL.replace('http', 'ws');
        const webSocket = new WebSocket(webSocketURL);

        window.addEventListener('beforeunload', function(event) {
            // Close the WebSocket connection earlier to avoid a few bugs
            webSocket.close();
        });

        webSocket.onopen = function(event) {
          console.log('WebSocket connection established.');
        };

        webSocket.onerror = function(error) {
          console.error('WebSocket error:', error);
        };

        window.addEventListener('load', function (event) {
            $('#staticBackdrop').modal('show');

            const gameHistory = document.querySelector("body > div > main > div.game-log-container > div");
            gameHistory.scrollTop = gameHistory.scrollHeight;
        });

        webSocket.addEventListener('message', function(event) {
            const message = JSON.parse(event.data);
            console.log('received message: ' + message);
            if (message.type === 'NextPlayer' || message.type === 'NewPlayerJoined') {
                location.reload();
            } else if (message.type === 'GameOver') {
                console.log('Game over!');
                var element = document.querySelector("body > div");
                var msgDiv = document.createElement('div');
                msgDiv.className = 'alert alert-success';
                msgDiv.innerHTML = 'Game over, ' + message.winner + ' won!';
                element.innerHTML = '';
                element.appendChild(msgDiv);
            }
        });

    </script>

}
}